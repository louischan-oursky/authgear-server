// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"context"
	"github.com/authgear/authgear-server/pkg/images/config"
	"github.com/authgear/authgear-server/pkg/images/deps"
	"github.com/authgear/authgear-server/pkg/lib/config/configsource"
	"github.com/authgear/authgear-server/pkg/lib/infra/db/globaldb"
	"github.com/authgear/authgear-server/pkg/util/clock"
	"github.com/google/wire"
)

// Injectors from wire.go:

func newConfigSourceController(p *deps.RootProvider, c context.Context) *configsource.Controller {
	environmentConfig := &p.EnvironmentConfig
	config := environmentConfig.ConfigSource
	factory := p.LoggerFactory
	localFSLogger := configsource.NewLocalFSLogger(factory)
	manager := p.BaseResources
	localFS := &configsource.LocalFS{
		Logger:        localFSLogger,
		BaseResources: manager,
		Config:        config,
	}
	databaseLogger := configsource.NewDatabaseLogger(factory)
	trustProxy := environmentConfig.TrustProxy
	clock := _wireSystemClockValue
	globalDatabaseCredentialsEnvironmentConfig := environmentConfig.GlobalDatabase
	sqlBuilder := globaldb.NewSQLBuilder(globalDatabaseCredentialsEnvironmentConfig)
	storeFactory := configsource.NewStoreFactory(c, sqlBuilder)
	pool := p.DatabasePool
	databaseEnvironmentConfig := environmentConfig.DatabaseConfig
	tracer := p.Tracer
	databaseHandleFactory := configsource.NewDatabaseHandleFactory(c, pool, globalDatabaseCredentialsEnvironmentConfig, databaseEnvironmentConfig, factory, tracer)
	resolveAppIDType := configsource.NewResolveAppIDTypePath()
	database := &configsource.Database{
		Logger:                databaseLogger,
		BaseResources:         manager,
		TrustProxy:            trustProxy,
		Config:                config,
		Clock:                 clock,
		StoreFactory:          storeFactory,
		DatabaseHandleFactory: databaseHandleFactory,
		DatabaseCredentials:   globalDatabaseCredentialsEnvironmentConfig,
		DatabaseConfig:        databaseEnvironmentConfig,
		ResolveAppIDType:      resolveAppIDType,
	}
	controller := configsource.NewController(config, localFS, database)
	return controller
}

var (
	_wireSystemClockValue = clock.NewSystemClock()
)

// wire.go:

var configSourceConfigDependencySet = wire.NewSet(globaldb.DependencySet, clock.DependencySet, wire.FieldsOf(new(*deps.RootProvider),
	"EnvironmentConfig",
	"LoggerFactory",
	"DatabasePool",
	"BaseResources",
	"Tracer",
), wire.FieldsOf(new(*config.EnvironmentConfig),
	"TrustProxy",
	"ConfigSource",
	"GlobalDatabase",
	"DatabaseConfig",
),
)
