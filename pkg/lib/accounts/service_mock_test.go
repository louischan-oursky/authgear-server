// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package accounts is a generated GoMock package.
package accounts

import (
	reflect "reflect"

	model "github.com/authgear/authgear-server/pkg/api/model"
	authenticator "github.com/authgear/authgear-server/pkg/lib/authn/authenticator"
	identity "github.com/authgear/authgear-server/pkg/lib/authn/identity"
	loginid "github.com/authgear/authgear-server/pkg/lib/authn/identity/loginid"
	user "github.com/authgear/authgear-server/pkg/lib/authn/user"
	config "github.com/authgear/authgear-server/pkg/lib/config"
	verification "github.com/authgear/authgear-server/pkg/lib/feature/verification"
	accesscontrol "github.com/authgear/authgear-server/pkg/util/accesscontrol"
	gomock "github.com/golang/mock/gomock"
)

// MockLoginIDIdentities is a mock of LoginIDIdentities interface.
type MockLoginIDIdentities struct {
	ctrl     *gomock.Controller
	recorder *MockLoginIDIdentitiesMockRecorder
}

// MockLoginIDIdentitiesMockRecorder is the mock recorder for MockLoginIDIdentities.
type MockLoginIDIdentitiesMockRecorder struct {
	mock *MockLoginIDIdentities
}

// NewMockLoginIDIdentities creates a new mock instance.
func NewMockLoginIDIdentities(ctrl *gomock.Controller) *MockLoginIDIdentities {
	mock := &MockLoginIDIdentities{ctrl: ctrl}
	mock.recorder = &MockLoginIDIdentitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginIDIdentities) EXPECT() *MockLoginIDIdentitiesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginIDIdentities) Create(i *identity.LoginID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoginIDIdentitiesMockRecorder) Create(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginIDIdentities)(nil).Create), i)
}

// Get mocks base method.
func (m *MockLoginIDIdentities) Get(userID, id string) (*identity.LoginID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, id)
	ret0, _ := ret[0].(*identity.LoginID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoginIDIdentitiesMockRecorder) Get(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoginIDIdentities)(nil).Get), userID, id)
}

// GetByUniqueKey mocks base method.
func (m *MockLoginIDIdentities) GetByUniqueKey(uniqueKey string) (*identity.LoginID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUniqueKey", uniqueKey)
	ret0, _ := ret[0].(*identity.LoginID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUniqueKey indicates an expected call of GetByUniqueKey.
func (mr *MockLoginIDIdentitiesMockRecorder) GetByUniqueKey(uniqueKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUniqueKey", reflect.TypeOf((*MockLoginIDIdentities)(nil).GetByUniqueKey), uniqueKey)
}

// GetByValue mocks base method.
func (m *MockLoginIDIdentities) GetByValue(loginIDValue string) ([]*identity.LoginID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByValue", loginIDValue)
	ret0, _ := ret[0].([]*identity.LoginID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByValue indicates an expected call of GetByValue.
func (mr *MockLoginIDIdentitiesMockRecorder) GetByValue(loginIDValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByValue", reflect.TypeOf((*MockLoginIDIdentities)(nil).GetByValue), loginIDValue)
}

// GetMany mocks base method.
func (m *MockLoginIDIdentities) GetMany(ids []string) ([]*identity.LoginID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*identity.LoginID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockLoginIDIdentitiesMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockLoginIDIdentities)(nil).GetMany), ids)
}

// ListByClaim mocks base method.
func (m *MockLoginIDIdentities) ListByClaim(name, value string) ([]*identity.LoginID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByClaim", name, value)
	ret0, _ := ret[0].([]*identity.LoginID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByClaim indicates an expected call of ListByClaim.
func (mr *MockLoginIDIdentitiesMockRecorder) ListByClaim(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByClaim", reflect.TypeOf((*MockLoginIDIdentities)(nil).ListByClaim), name, value)
}

// New mocks base method.
func (m *MockLoginIDIdentities) New(userID string, loginID identity.LoginIDSpec, options loginid.CheckerOptions) (*identity.LoginID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", userID, loginID, options)
	ret0, _ := ret[0].(*identity.LoginID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockLoginIDIdentitiesMockRecorder) New(userID, loginID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockLoginIDIdentities)(nil).New), userID, loginID, options)
}

// WithValue mocks base method.
func (m *MockLoginIDIdentities) WithValue(iden *identity.LoginID, value string, options loginid.CheckerOptions) (*identity.LoginID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithValue", iden, value, options)
	ret0, _ := ret[0].(*identity.LoginID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithValue indicates an expected call of WithValue.
func (mr *MockLoginIDIdentitiesMockRecorder) WithValue(iden, value, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithValue", reflect.TypeOf((*MockLoginIDIdentities)(nil).WithValue), iden, value, options)
}

// MockOAuthIdentities is a mock of OAuthIdentities interface.
type MockOAuthIdentities struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthIdentitiesMockRecorder
}

// MockOAuthIdentitiesMockRecorder is the mock recorder for MockOAuthIdentities.
type MockOAuthIdentitiesMockRecorder struct {
	mock *MockOAuthIdentities
}

// NewMockOAuthIdentities creates a new mock instance.
func NewMockOAuthIdentities(ctrl *gomock.Controller) *MockOAuthIdentities {
	mock := &MockOAuthIdentities{ctrl: ctrl}
	mock.recorder = &MockOAuthIdentitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthIdentities) EXPECT() *MockOAuthIdentitiesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOAuthIdentities) Create(i *identity.OAuth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOAuthIdentitiesMockRecorder) Create(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOAuthIdentities)(nil).Create), i)
}

// Get mocks base method.
func (m *MockOAuthIdentities) Get(userID, id string) (*identity.OAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, id)
	ret0, _ := ret[0].(*identity.OAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOAuthIdentitiesMockRecorder) Get(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOAuthIdentities)(nil).Get), userID, id)
}

// GetByProviderSubject mocks base method.
func (m *MockOAuthIdentities) GetByProviderSubject(provider config.ProviderID, subjectID string) (*identity.OAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProviderSubject", provider, subjectID)
	ret0, _ := ret[0].(*identity.OAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProviderSubject indicates an expected call of GetByProviderSubject.
func (mr *MockOAuthIdentitiesMockRecorder) GetByProviderSubject(provider, subjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProviderSubject", reflect.TypeOf((*MockOAuthIdentities)(nil).GetByProviderSubject), provider, subjectID)
}

// GetMany mocks base method.
func (m *MockOAuthIdentities) GetMany(ids []string) ([]*identity.OAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*identity.OAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockOAuthIdentitiesMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockOAuthIdentities)(nil).GetMany), ids)
}

// ListByClaim mocks base method.
func (m *MockOAuthIdentities) ListByClaim(name, value string) ([]*identity.OAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByClaim", name, value)
	ret0, _ := ret[0].([]*identity.OAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByClaim indicates an expected call of ListByClaim.
func (mr *MockOAuthIdentitiesMockRecorder) ListByClaim(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByClaim", reflect.TypeOf((*MockOAuthIdentities)(nil).ListByClaim), name, value)
}

// New mocks base method.
func (m *MockOAuthIdentities) New(userID string, provider config.ProviderID, subjectID string, profile, claims map[string]interface{}) *identity.OAuth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", userID, provider, subjectID, profile, claims)
	ret0, _ := ret[0].(*identity.OAuth)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockOAuthIdentitiesMockRecorder) New(userID, provider, subjectID, profile, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockOAuthIdentities)(nil).New), userID, provider, subjectID, profile, claims)
}

// WithUpdate mocks base method.
func (m *MockOAuthIdentities) WithUpdate(iden *identity.OAuth, rawProfile, claims map[string]interface{}) *identity.OAuth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUpdate", iden, rawProfile, claims)
	ret0, _ := ret[0].(*identity.OAuth)
	return ret0
}

// WithUpdate indicates an expected call of WithUpdate.
func (mr *MockOAuthIdentitiesMockRecorder) WithUpdate(iden, rawProfile, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpdate", reflect.TypeOf((*MockOAuthIdentities)(nil).WithUpdate), iden, rawProfile, claims)
}

// MockAnonymousIdentities is a mock of AnonymousIdentities interface.
type MockAnonymousIdentities struct {
	ctrl     *gomock.Controller
	recorder *MockAnonymousIdentitiesMockRecorder
}

// MockAnonymousIdentitiesMockRecorder is the mock recorder for MockAnonymousIdentities.
type MockAnonymousIdentitiesMockRecorder struct {
	mock *MockAnonymousIdentities
}

// NewMockAnonymousIdentities creates a new mock instance.
func NewMockAnonymousIdentities(ctrl *gomock.Controller) *MockAnonymousIdentities {
	mock := &MockAnonymousIdentities{ctrl: ctrl}
	mock.recorder = &MockAnonymousIdentitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnonymousIdentities) EXPECT() *MockAnonymousIdentitiesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnonymousIdentities) Create(i *identity.Anonymous) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAnonymousIdentitiesMockRecorder) Create(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnonymousIdentities)(nil).Create), i)
}

// Get mocks base method.
func (m *MockAnonymousIdentities) Get(userID, id string) (*identity.Anonymous, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, id)
	ret0, _ := ret[0].(*identity.Anonymous)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAnonymousIdentitiesMockRecorder) Get(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAnonymousIdentities)(nil).Get), userID, id)
}

// GetByKeyID mocks base method.
func (m *MockAnonymousIdentities) GetByKeyID(keyID string) (*identity.Anonymous, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyID", keyID)
	ret0, _ := ret[0].(*identity.Anonymous)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeyID indicates an expected call of GetByKeyID.
func (mr *MockAnonymousIdentitiesMockRecorder) GetByKeyID(keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyID", reflect.TypeOf((*MockAnonymousIdentities)(nil).GetByKeyID), keyID)
}

// GetMany mocks base method.
func (m *MockAnonymousIdentities) GetMany(ids []string) ([]*identity.Anonymous, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*identity.Anonymous)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockAnonymousIdentitiesMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockAnonymousIdentities)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockAnonymousIdentities) New(userID, keyID string, key []byte) *identity.Anonymous {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", userID, keyID, key)
	ret0, _ := ret[0].(*identity.Anonymous)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockAnonymousIdentitiesMockRecorder) New(userID, keyID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockAnonymousIdentities)(nil).New), userID, keyID, key)
}

// MockBiometricIdentities is a mock of BiometricIdentities interface.
type MockBiometricIdentities struct {
	ctrl     *gomock.Controller
	recorder *MockBiometricIdentitiesMockRecorder
}

// MockBiometricIdentitiesMockRecorder is the mock recorder for MockBiometricIdentities.
type MockBiometricIdentitiesMockRecorder struct {
	mock *MockBiometricIdentities
}

// NewMockBiometricIdentities creates a new mock instance.
func NewMockBiometricIdentities(ctrl *gomock.Controller) *MockBiometricIdentities {
	mock := &MockBiometricIdentities{ctrl: ctrl}
	mock.recorder = &MockBiometricIdentitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBiometricIdentities) EXPECT() *MockBiometricIdentitiesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBiometricIdentities) Create(i *identity.Biometric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBiometricIdentitiesMockRecorder) Create(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBiometricIdentities)(nil).Create), i)
}

// Get mocks base method.
func (m *MockBiometricIdentities) Get(userID, id string) (*identity.Biometric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, id)
	ret0, _ := ret[0].(*identity.Biometric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBiometricIdentitiesMockRecorder) Get(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBiometricIdentities)(nil).Get), userID, id)
}

// GetByKeyID mocks base method.
func (m *MockBiometricIdentities) GetByKeyID(keyID string) (*identity.Biometric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKeyID", keyID)
	ret0, _ := ret[0].(*identity.Biometric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKeyID indicates an expected call of GetByKeyID.
func (mr *MockBiometricIdentitiesMockRecorder) GetByKeyID(keyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKeyID", reflect.TypeOf((*MockBiometricIdentities)(nil).GetByKeyID), keyID)
}

// GetMany mocks base method.
func (m *MockBiometricIdentities) GetMany(ids []string) ([]*identity.Biometric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*identity.Biometric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockBiometricIdentitiesMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockBiometricIdentities)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockBiometricIdentities) New(userID, keyID string, key []byte, deviceInfo map[string]interface{}) *identity.Biometric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", userID, keyID, key, deviceInfo)
	ret0, _ := ret[0].(*identity.Biometric)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockBiometricIdentitiesMockRecorder) New(userID, keyID, key, deviceInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockBiometricIdentities)(nil).New), userID, keyID, key, deviceInfo)
}

// MockPasskeyIdentities is a mock of PasskeyIdentities interface.
type MockPasskeyIdentities struct {
	ctrl     *gomock.Controller
	recorder *MockPasskeyIdentitiesMockRecorder
}

// MockPasskeyIdentitiesMockRecorder is the mock recorder for MockPasskeyIdentities.
type MockPasskeyIdentitiesMockRecorder struct {
	mock *MockPasskeyIdentities
}

// NewMockPasskeyIdentities creates a new mock instance.
func NewMockPasskeyIdentities(ctrl *gomock.Controller) *MockPasskeyIdentities {
	mock := &MockPasskeyIdentities{ctrl: ctrl}
	mock.recorder = &MockPasskeyIdentitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasskeyIdentities) EXPECT() *MockPasskeyIdentitiesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPasskeyIdentities) Create(i *identity.Passkey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPasskeyIdentitiesMockRecorder) Create(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPasskeyIdentities)(nil).Create), i)
}

// Get mocks base method.
func (m *MockPasskeyIdentities) Get(userID, id string) (*identity.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, id)
	ret0, _ := ret[0].(*identity.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPasskeyIdentitiesMockRecorder) Get(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPasskeyIdentities)(nil).Get), userID, id)
}

// GetByAssertionResponse mocks base method.
func (m *MockPasskeyIdentities) GetByAssertionResponse(assertionResponse []byte) (*identity.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAssertionResponse", assertionResponse)
	ret0, _ := ret[0].(*identity.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAssertionResponse indicates an expected call of GetByAssertionResponse.
func (mr *MockPasskeyIdentitiesMockRecorder) GetByAssertionResponse(assertionResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAssertionResponse", reflect.TypeOf((*MockPasskeyIdentities)(nil).GetByAssertionResponse), assertionResponse)
}

// GetMany mocks base method.
func (m *MockPasskeyIdentities) GetMany(ids []string) ([]*identity.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*identity.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockPasskeyIdentitiesMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockPasskeyIdentities)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockPasskeyIdentities) New(userID string, attestationResponse []byte) (*identity.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", userID, attestationResponse)
	ret0, _ := ret[0].(*identity.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockPasskeyIdentitiesMockRecorder) New(userID, attestationResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPasskeyIdentities)(nil).New), userID, attestationResponse)
}

// MockSIWEIdentities is a mock of SIWEIdentities interface.
type MockSIWEIdentities struct {
	ctrl     *gomock.Controller
	recorder *MockSIWEIdentitiesMockRecorder
}

// MockSIWEIdentitiesMockRecorder is the mock recorder for MockSIWEIdentities.
type MockSIWEIdentitiesMockRecorder struct {
	mock *MockSIWEIdentities
}

// NewMockSIWEIdentities creates a new mock instance.
func NewMockSIWEIdentities(ctrl *gomock.Controller) *MockSIWEIdentities {
	mock := &MockSIWEIdentities{ctrl: ctrl}
	mock.recorder = &MockSIWEIdentitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSIWEIdentities) EXPECT() *MockSIWEIdentitiesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSIWEIdentities) Create(i *identity.SIWE) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSIWEIdentitiesMockRecorder) Create(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSIWEIdentities)(nil).Create), i)
}

// Get mocks base method.
func (m *MockSIWEIdentities) Get(userID, id string) (*identity.SIWE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, id)
	ret0, _ := ret[0].(*identity.SIWE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSIWEIdentitiesMockRecorder) Get(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSIWEIdentities)(nil).Get), userID, id)
}

// GetByMessage mocks base method.
func (m *MockSIWEIdentities) GetByMessage(msg, signature string) (*identity.SIWE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMessage", msg, signature)
	ret0, _ := ret[0].(*identity.SIWE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMessage indicates an expected call of GetByMessage.
func (mr *MockSIWEIdentitiesMockRecorder) GetByMessage(msg, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMessage", reflect.TypeOf((*MockSIWEIdentities)(nil).GetByMessage), msg, signature)
}

// GetMany mocks base method.
func (m *MockSIWEIdentities) GetMany(ids []string) ([]*identity.SIWE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*identity.SIWE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockSIWEIdentitiesMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockSIWEIdentities)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockSIWEIdentities) New(userID, msg, signature string) (*identity.SIWE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", userID, msg, signature)
	ret0, _ := ret[0].(*identity.SIWE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockSIWEIdentitiesMockRecorder) New(userID, msg, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockSIWEIdentities)(nil).New), userID, msg, signature)
}

// MockPasswordAuthenticators is a mock of PasswordAuthenticators interface.
type MockPasswordAuthenticators struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordAuthenticatorsMockRecorder
}

// MockPasswordAuthenticatorsMockRecorder is the mock recorder for MockPasswordAuthenticators.
type MockPasswordAuthenticatorsMockRecorder struct {
	mock *MockPasswordAuthenticators
}

// NewMockPasswordAuthenticators creates a new mock instance.
func NewMockPasswordAuthenticators(ctrl *gomock.Controller) *MockPasswordAuthenticators {
	mock := &MockPasswordAuthenticators{ctrl: ctrl}
	mock.recorder = &MockPasswordAuthenticatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordAuthenticators) EXPECT() *MockPasswordAuthenticatorsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPasswordAuthenticators) Create(arg0 *authenticator.Password) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPasswordAuthenticatorsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPasswordAuthenticators)(nil).Create), arg0)
}

// GetMany mocks base method.
func (m *MockPasswordAuthenticators) GetMany(ids []string) ([]*authenticator.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*authenticator.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockPasswordAuthenticatorsMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockPasswordAuthenticators)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockPasswordAuthenticators) New(id, userID, password string, isDefault bool, kind string) (*authenticator.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", id, userID, password, isDefault, kind)
	ret0, _ := ret[0].(*authenticator.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockPasswordAuthenticatorsMockRecorder) New(id, userID, password, isDefault, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPasswordAuthenticators)(nil).New), id, userID, password, isDefault, kind)
}

// WithPassword mocks base method.
func (m *MockPasswordAuthenticators) WithPassword(a *authenticator.Password, password string) (*authenticator.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPassword", a, password)
	ret0, _ := ret[0].(*authenticator.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithPassword indicates an expected call of WithPassword.
func (mr *MockPasswordAuthenticatorsMockRecorder) WithPassword(a, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPassword", reflect.TypeOf((*MockPasswordAuthenticators)(nil).WithPassword), a, password)
}

// MockPasskeyAuthenticators is a mock of PasskeyAuthenticators interface.
type MockPasskeyAuthenticators struct {
	ctrl     *gomock.Controller
	recorder *MockPasskeyAuthenticatorsMockRecorder
}

// MockPasskeyAuthenticatorsMockRecorder is the mock recorder for MockPasskeyAuthenticators.
type MockPasskeyAuthenticatorsMockRecorder struct {
	mock *MockPasskeyAuthenticators
}

// NewMockPasskeyAuthenticators creates a new mock instance.
func NewMockPasskeyAuthenticators(ctrl *gomock.Controller) *MockPasskeyAuthenticators {
	mock := &MockPasskeyAuthenticators{ctrl: ctrl}
	mock.recorder = &MockPasskeyAuthenticatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasskeyAuthenticators) EXPECT() *MockPasskeyAuthenticatorsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPasskeyAuthenticators) Create(arg0 *authenticator.Passkey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPasskeyAuthenticatorsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPasskeyAuthenticators)(nil).Create), arg0)
}

// GetMany mocks base method.
func (m *MockPasskeyAuthenticators) GetMany(ids []string) ([]*authenticator.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*authenticator.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockPasskeyAuthenticatorsMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockPasskeyAuthenticators)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockPasskeyAuthenticators) New(id, userID string, attestationResponse []byte, isDefault bool, kind string) (*authenticator.Passkey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", id, userID, attestationResponse, isDefault, kind)
	ret0, _ := ret[0].(*authenticator.Passkey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockPasskeyAuthenticatorsMockRecorder) New(id, userID, attestationResponse, isDefault, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPasskeyAuthenticators)(nil).New), id, userID, attestationResponse, isDefault, kind)
}

// MockTOTPAuthenticators is a mock of TOTPAuthenticators interface.
type MockTOTPAuthenticators struct {
	ctrl     *gomock.Controller
	recorder *MockTOTPAuthenticatorsMockRecorder
}

// MockTOTPAuthenticatorsMockRecorder is the mock recorder for MockTOTPAuthenticators.
type MockTOTPAuthenticatorsMockRecorder struct {
	mock *MockTOTPAuthenticators
}

// NewMockTOTPAuthenticators creates a new mock instance.
func NewMockTOTPAuthenticators(ctrl *gomock.Controller) *MockTOTPAuthenticators {
	mock := &MockTOTPAuthenticators{ctrl: ctrl}
	mock.recorder = &MockTOTPAuthenticatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTOTPAuthenticators) EXPECT() *MockTOTPAuthenticatorsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTOTPAuthenticators) Create(arg0 *authenticator.TOTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTOTPAuthenticatorsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTOTPAuthenticators)(nil).Create), arg0)
}

// GetMany mocks base method.
func (m *MockTOTPAuthenticators) GetMany(ids []string) ([]*authenticator.TOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*authenticator.TOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockTOTPAuthenticatorsMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockTOTPAuthenticators)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockTOTPAuthenticators) New(id, userID, displayName string, isDefault bool, kind string) *authenticator.TOTP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", id, userID, displayName, isDefault, kind)
	ret0, _ := ret[0].(*authenticator.TOTP)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockTOTPAuthenticatorsMockRecorder) New(id, userID, displayName, isDefault, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTOTPAuthenticators)(nil).New), id, userID, displayName, isDefault, kind)
}

// MockOOBOTPAuthenticators is a mock of OOBOTPAuthenticators interface.
type MockOOBOTPAuthenticators struct {
	ctrl     *gomock.Controller
	recorder *MockOOBOTPAuthenticatorsMockRecorder
}

// MockOOBOTPAuthenticatorsMockRecorder is the mock recorder for MockOOBOTPAuthenticators.
type MockOOBOTPAuthenticatorsMockRecorder struct {
	mock *MockOOBOTPAuthenticators
}

// NewMockOOBOTPAuthenticators creates a new mock instance.
func NewMockOOBOTPAuthenticators(ctrl *gomock.Controller) *MockOOBOTPAuthenticators {
	mock := &MockOOBOTPAuthenticators{ctrl: ctrl}
	mock.recorder = &MockOOBOTPAuthenticatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOOBOTPAuthenticators) EXPECT() *MockOOBOTPAuthenticatorsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOOBOTPAuthenticators) Create(arg0 *authenticator.OOBOTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOOBOTPAuthenticatorsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOOBOTPAuthenticators)(nil).Create), arg0)
}

// GetMany mocks base method.
func (m *MockOOBOTPAuthenticators) GetMany(ids []string) ([]*authenticator.OOBOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ids)
	ret0, _ := ret[0].([]*authenticator.OOBOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockOOBOTPAuthenticatorsMockRecorder) GetMany(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockOOBOTPAuthenticators)(nil).GetMany), ids)
}

// New mocks base method.
func (m *MockOOBOTPAuthenticators) New(id, userID string, oobAuthenticatorType model.AuthenticatorType, target string, isDefault bool, kind string) (*authenticator.OOBOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", id, userID, oobAuthenticatorType, target, isDefault, kind)
	ret0, _ := ret[0].(*authenticator.OOBOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockOOBOTPAuthenticatorsMockRecorder) New(id, userID, oobAuthenticatorType, target, isDefault, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockOOBOTPAuthenticators)(nil).New), id, userID, oobAuthenticatorType, target, isDefault, kind)
}

// WithSpec mocks base method.
func (m *MockOOBOTPAuthenticators) WithSpec(a *authenticator.OOBOTP, spec *authenticator.OOBOTPSpec) (*authenticator.OOBOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithSpec", a, spec)
	ret0, _ := ret[0].(*authenticator.OOBOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithSpec indicates an expected call of WithSpec.
func (mr *MockOOBOTPAuthenticatorsMockRecorder) WithSpec(a, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSpec", reflect.TypeOf((*MockOOBOTPAuthenticators)(nil).WithSpec), a, spec)
}

// MockVerifiedClaims is a mock of VerifiedClaims interface.
type MockVerifiedClaims struct {
	ctrl     *gomock.Controller
	recorder *MockVerifiedClaimsMockRecorder
}

// MockVerifiedClaimsMockRecorder is the mock recorder for MockVerifiedClaims.
type MockVerifiedClaimsMockRecorder struct {
	mock *MockVerifiedClaims
}

// NewMockVerifiedClaims creates a new mock instance.
func NewMockVerifiedClaims(ctrl *gomock.Controller) *MockVerifiedClaims {
	mock := &MockVerifiedClaims{ctrl: ctrl}
	mock.recorder = &MockVerifiedClaimsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifiedClaims) EXPECT() *MockVerifiedClaimsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVerifiedClaims) Create(claim *verification.Claim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", claim)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVerifiedClaimsMockRecorder) Create(claim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVerifiedClaims)(nil).Create), claim)
}

// ListByUser mocks base method.
func (m *MockVerifiedClaims) ListByUser(userID string) ([]*verification.Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userID)
	ret0, _ := ret[0].([]*verification.Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockVerifiedClaimsMockRecorder) ListByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockVerifiedClaims)(nil).ListByUser), userID)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsers) Create(u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersMockRecorder) Create(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsers)(nil).Create), u)
}

// Get mocks base method.
func (m *MockUsers) Get(id string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsersMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsers)(nil).Get), id)
}

// MockStandardAttributes is a mock of StandardAttributes interface.
type MockStandardAttributes struct {
	ctrl     *gomock.Controller
	recorder *MockStandardAttributesMockRecorder
}

// MockStandardAttributesMockRecorder is the mock recorder for MockStandardAttributes.
type MockStandardAttributesMockRecorder struct {
	mock *MockStandardAttributes
}

// NewMockStandardAttributes creates a new mock instance.
func NewMockStandardAttributes(ctrl *gomock.Controller) *MockStandardAttributes {
	mock := &MockStandardAttributes{ctrl: ctrl}
	mock.recorder = &MockStandardAttributesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStandardAttributes) EXPECT() *MockStandardAttributesMockRecorder {
	return m.recorder
}

// PopulateIdentityAwareStandardAttributes0 mocks base method.
func (m *MockStandardAttributes) PopulateIdentityAwareStandardAttributes0(originalStdAttrs map[string]interface{}, unsortedIdentities []*identity.Info) (map[string]interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateIdentityAwareStandardAttributes0", originalStdAttrs, unsortedIdentities)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// PopulateIdentityAwareStandardAttributes0 indicates an expected call of PopulateIdentityAwareStandardAttributes0.
func (mr *MockStandardAttributesMockRecorder) PopulateIdentityAwareStandardAttributes0(originalStdAttrs, unsortedIdentities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateIdentityAwareStandardAttributes0", reflect.TypeOf((*MockStandardAttributes)(nil).PopulateIdentityAwareStandardAttributes0), originalStdAttrs, unsortedIdentities)
}

// UpdateStandardAttributes0 mocks base method.
func (m *MockStandardAttributes) UpdateStandardAttributes0(role accesscontrol.Role, u *user.User, identities []*identity.Info, stdAttrsToUpdate map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStandardAttributes0", role, u, identities, stdAttrsToUpdate)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStandardAttributes0 indicates an expected call of UpdateStandardAttributes0.
func (mr *MockStandardAttributesMockRecorder) UpdateStandardAttributes0(role, u, identities, stdAttrsToUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStandardAttributes0", reflect.TypeOf((*MockStandardAttributes)(nil).UpdateStandardAttributes0), role, u, identities, stdAttrsToUpdate)
}
